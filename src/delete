//  public void testNodesOldMethod(String[] args) {
//    Project P1 = new Project();
//    P1.name = "P1";
//    Task T1 = new Task();
//    T1.name = "T1";
//    Project P2 = new Project();
//    P2.name = "P2";
//    Task T2 = new Task();
//    T2.name = "T2";
//
//
//    P1.addChild(T1,new int[]{}, 0);
//    System.out.println("--------------");
//    P1.startTask(new int[]{0}, 1);
//    System.out.println("--------------");
//    P1.stopTask(new int[]{0}, 1);
//    System.out.println("--------------");
//    P1.addChild(P2,new int[]{}, 0);
//    System.out.println("--------------");
//    P1.addChild(T2,new int[]{1}, 1);
//    System.out.println("--------------");
//    P1.startTask(new int[]{0,1}, 2);
//    System.out.println("--------------");
//    P1.stopTask(new int[]{0,1}, 2);
//  }

  public static void testNodes(){
    Clock clock = new Clock();
    clock.startClock();

    Project p1 = new Project("P1", null);
    Project p2 = new Project("P2", p1);
    Task t1 = new Task("T1", p2);
    Task t2 = new Task("T2", p1);

    t1.start(clock);
    try{ Thread.sleep(8000); }
    catch(Exception e){}
    t1.stop(clock);

    t2.start(clock);
    try{ Thread.sleep(8000); }
    catch(Exception e){}
    t2.stop(clock);

  }




METODOS DE PROJECT

//  @Override
//  public void addChild(Assignment assignment, int[] childIndex, int depth){ //depth of the child parent (MIN=0)
//    System.out.println("Starting addChild(), this is "+ name);
//    if(depth == 0){ //Current project is child's parent
//      System.out.println("Child added");
//      assignment.setParent(this);
//      children.add(assignment);
//    }
//    else{ //Current project is not child's parent, go to next child
//      System.out.println("Go to next child");
//      children.get(childIndex[depth-1]).addChild(assignment, childIndex, depth-1);
//    }
//  }

//  @Override
//  public void startTask(int[] childIndex, int depth){ //depth of the task to start (MIN=1)
//    System.out.println("Starting startTask(), this is "+ name);
//    if(depth == 1){ //Current project is task's parent
//      children.get(childIndex[0]).start();
//    }
//    else{ //Current project is not task's parent, go to next child
//      System.out.println("Go to next child");
//      children.get(childIndex[depth-1]).startTask(childIndex, depth-1);
//    }
//  }

//  @Override
//  public void stopTask(int[] childIndex, int depth){ //depth of the task to stop (MIN=1)
//    System.out.println("Starting stopTask(), this is "+ name);
//    if(depth == 1){ //Current project is task's parent
//      children.get(childIndex[0]).stop();
//    }
//    else{ //Current project is not task's parent, go to next child
//      System.out.println("Go to next child");
//      children.get(childIndex[depth-1]).stopTask(childIndex, depth-1);
//    }
//  }

// METODOS DE ASSIGMENT

//  public void addChild(Assignment assignment, int[] childIndex, int depth){} //Only used by project
//  public void startTask(int[] childIndex, int depth){} //Only used by project
//  public void stopTask(int[] childIndex, int depth){} //Only used by project
//  public void start(Clock clock){} //Only used by task
//  public void stop(Clock clock){} //Only used by task